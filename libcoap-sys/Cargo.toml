# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright Â© The libcoap-rs Contributors, all rights reserved.
# This file is part of the libcoap-rs project, see the README file for
# general information on this project and the NOTICE.md and LICENSE files
# for information regarding copyright ownership and terms of use.
#
# Cargo.toml for libcoap-sys

[package]
name = "libcoap-sys"
description = "Raw bindings to the libcoap CoAP library."
version = "0.2.2+libcoap-4.3.1"
edition = "2021"
license = "BSD-2-Clause AND BSD-1-Clause"
links = "coap-3"
readme = "README.md"
repository = "https://github.com/namib-project/libcoap-rs"
authors = ["Hugo Hakim Damer <hdamer@uni-bremen.de>"]
categories = ["external-ffi-bindings", "network-programming", "embedded"]
include = ["/README.md", "/LICENSE", "/NOTICE.md", "/SECURITY.md"]
keywords = ["coap", "libcoap"]
exclude = ["src/libcoap/ext/"]
resolver = "2"
build = "build/main.rs"
# Current reason for MSRV (please update when increasing MSRV): bindgen generates unsafe extern "C" blocks, which are
# not supported on Rust < 1.82.
# See also: https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-extern.html
rust-version = "1.82.0"

[features]
# The default features match those of libcoap's configure script for
# the minimum supported version.
default = [
    "dtls",
    "oscore",
    "ipv4",
    "ipv6",
    "af-unix",
    "tcp",
    "websockets",
    "async",
    "observe-persist",
    "q-block",
    "thread-safe",
    "thread-recursive-lock-detection",
    "server",
    "client",
    "epoll",
    # TODO add proxy
]

# Allows using the version of OpenSSL provided by openssl-sys instead of a system-provided one.
# Note that this does not enforce the use of OpenSSL in libcoap, see the crate-level documentation for more info.
dtls-openssl-sys = ["dep:openssl-sys"]
# Tell the openssl-sys version that is possibly used by libcoap-sys to use the vendored version of its library.
dtls-openssl-sys-vendored = ["dtls-openssl-sys", "openssl-sys/vendored"]
# Allows using the version of MbedTLS provided by mbedtls-sys-auto instead of a system-provided one.
# Note that this does not enforce the use of MbedTLS in libcoap, see the crate-level documentation for more info.
dtls-mbedtls-sys = ["dep:mbedtls-sys-auto"]
# Allows using the version of TinyDTLS provided by tinydtls-sys instead of a system-provided one.
# Note that this does not enforce the use of TinyDTLS in libcoap, see the crate-level documentation for more info.
dtls-tinydtls-sys = ["dep:tinydtls-sys", "tinydtls-sys/ecc", "tinydtls-sys/psk"]
# Tell the tinydtls-sys version that is possibly used by libcoap-sys to use the vendored version of its library.
dtls-tinydtls-sys-vendored = ["dtls-tinydtls-sys", "tinydtls-sys/vendored"]

# Enabling this feature will allow libcoap-sys to be built with and statically linked to a vendored version of libcoap,
# This way, it is no longer required to have libcoap installed to use this crate.
vendored = []
# --- FEATURE FLAGS ---
# Enable this feature to enable/require CoAP over DTLS support in the C library.
# Corresponding libcoap configure flag: --enable-dtls
dtls = []
# Enable this feature to enable/require TLS support in addition to DTLS support.
tls = ["dtls", "tcp"]
# Enable this feature to enable/require OSCORE functionality in the C library.
# Corresponding libcoap configure flag: --enable-oscore
oscore = []
# Enable this feature to enable/require IPv4 support in the C library.
# Corresponding libcoap configure flag: --enable-ipv4-support
ipv4 = []
# Enable this feature to enable/require IPv6 support in the C library.
# Corresponding libcoap configure flag: --enable-ipv6-support
ipv6 = []
# Enable this feature to enable/require support for Unix sockets in the C library.
# Corresponding libcoap configure flag: --enable-af-unix-support
af-unix = []
# Enable this feature to enable/require support for CoAP over TCP in the C library.
# Corresponding libcoap configure flag: --enable-tcp
tcp = []
# Enable this feature to enable/require CoAP over WebSockets in the C library.
# Corresponding libcoap configure flag: --enable-websockets
websockets = []
# Enable this feature to enable/require async functionality in the C library.
# Note that this does not generate async-functions as they are used in Rust, it allows for CoAP separate responses as
# specified in RFC 7252, Section 5.2.2.
# Corresponding libcoap configure flag: --enable-async
async = []
# Enable this feature to enable/require support for persisting observes over a server restart in the C library.
# Corresponding libcoap configure flag: --enable-observe-persist
observe-persist = []
# Enable this feature to enable/require Q-Block support in the C library.
# Corresponding libcoap configure flag: --enable-q-block
q-block = []
# Enable this feature to enable/require the thread-safety facilities in the C library to be enabled.
# Corresponding libcoap configure flag: --enable-thread-safe
thread-safe = []
# Enable this feature to enable/require recursive lock detection in the C library.
# Will also implicitly enable the `thread-safe` feature.
# Corresponding libcoap configure flag: --enable-thread-recursive-lock-detection
thread-recursive-lock-detection = ["thread-safe"]
# Enable this feature to set/require the small stack flag in the C library.
# Corresponding libcoap configure flag: --enable-small-stack
small-stack = []
# Enable this feature to enable/require server functionality in the C library.
# Corresponding libcoap configure flag: --enable-server-mode
server = []
# Enable this feature to enable/require client functionality in the C library.
# Corresponding libcoap configure flag: --enable-client-mode
client = []
# Enable this feature to enable/require epoll usage in the C library.
# Corresponding libcoap configure flag: --with-epoll
epoll = []
# Enable this feature to require support for CoAP over WebSockets using TLS in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
secure-websockets = ["tls", "websockets"]
# Enable this feature to require support for CIDs in DTLS in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-cid = ["dtls"]
# Enabling this feature to require support for DTLS-PSK in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-psk = ["dtls"]
# Enabling this feature to require support for DTLS-PKI in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-pki = ["dtls"]
# Enabling this feature to require support for DTLS-PKCS11 in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-pkcs11 = ["dtls"]
# Enabling this feature to require support for DTLS-RPK in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-rpk = ["dtls"]

[dependencies]
openssl-sys = { version = "^0.9.74", optional = true }
mbedtls-sys-auto = { version = "^2.26", optional = true }
tinydtls-sys = { version = "^0.2.0", default-features = false, optional = true }

[target.'cfg(target_os="espidf")'.dependencies]
esp-idf-sys = { version = "0.36.1" }

[target.'cfg(not(target_os="espidf"))'.dependencies]
libc = "0.2.126"

[build-dependencies]
bindgen = { version = "0.71.1" }
autotools = "^0.2.3"
fs_extra = "^1.2"
pkg-config = "^0.3.24"
version-compare = "0.2.0"
anyhow = { version = "1.0.94", features = ["backtrace"] }
enumset = "1.1.5"
syn = { version = "2.0.96" }
embuild = { version = "0.33.0", features = ["espidf"] }

[package.metadata.docs.rs]
features = ["dtls", "dtls_backend_openssl", "vendored"]

[[package.metadata.esp-idf-sys.extra_components]]
remote_component = { name = "espressif/coap", version = "4.3.5~3" }
bindings_header = "src/wrapper.h"
