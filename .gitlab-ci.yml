stages:
  - test
  - docs
  - release

# No longer create push pipeline if MR is created (avoiding duplicate pipelines).
# See https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

# Default image for all builds is the generic controller project build image containing most
# external dependencies, including rust, clippy, cargo, and C library dependencies.
# Adding additional dependencies to this image (by opening a MR in the respective project)
# is strongly preferred to installing dependencies in before_script.
image: gitlab.informatik.uni-bremen.de:5005/namib-master/ci-docker-images/controller:generic

# Cache definition for the cargo package cache.
# Pull only by default - the fetch-deps job will update the cache for each build.
.pkg_cache: &pkg_cache
  key: "pkgcache-$CI_COMMIT_REF_SLUG"
  paths:
    - .cargo/
  policy: pull

.on_default_branch:
  - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.on_tags:
  - if: '$CI_COMMIT_TAG'

.allow_manual_run:
  - when: manual
    allow_failure: true

.on_ready_mrs:
  - if: '$CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_TITLE =~ /^(?:WIP|Draft):.*/'

default:
  # Use the shared linux Kubernetes cluster for most tasks.
  tags:
    - linux
    - docker
    - kubernetes
  # We don't want to keep most artifacts around for longer.
  artifacts:
    expire_in: 1 week
  # retry: 2
  cache:
    - *pkg_cache

fetch-deps:
  stage: .pre
  cache:
    - key: !reference [.pkg_cache, key]
      paths: !reference [.pkg_cache, paths]
      policy: pull-push
  script:
    - cargo fetch
    - cargo generate-lockfile
  artifacts:
    paths:
      - Cargo.lock # Because this is a library, we need the Cargo.lock to maintain consistency

.test_base:
  stage: test
  needs:
    - job: fetch-deps
      artifacts: true
  script:
    - cargo test --locked -p $PKG_NAME --no-fail-fast -- -Z unstable-options --format json --report-time | tee results.json
    - cat results.json | cargo2junit > target/$PKG_NAME-test-results.xml
  artifacts:
    reports:
      junit: target/$PKG_NAME-test-results.xml

sys:test:
  extends: .test_base
  variables:
    PKG_NAME: libcoap-sys

lib:test:
  extends: .test_base
  variables:
    PKG_NAME: libcoap


.coverage_base:
  stage: test
  allow_failure: true
  needs:
    - job: fetch-deps
      artifacts: true
  rules:
    - !reference [.on_tags]
    - !reference [.on_default_branch]
    - !reference [.on_ready_mrs]
    - !reference [.allow_manual_run]
  script:
    - cargo tarpaulin --locked --no-fail-fast -p $PKG_NAME --out Xml
    - mv cobertura.xml target/$PKG_NAME-coverage.xml
  artifacts:
    reports:
      cobertura: target/$PKG_NAME-coverage.xml


sys:coverage:
  extends: .coverage_base
  needs:
    - job: sys:test
      artifacts: false
  variables:
    PKG_NAME: libcoap-sys

lib:coverage:
  extends: .coverage_base
  needs:
    - job: lib:test
      artifacts: false
  variables:
    PKG_NAME: libcoap

.lint_base:
  stage: test
  allow_failure: true
  needs:
    - job: fetch-deps
      artifacts: true
  script:
    - cargo clippy --locked -p $PKG_NAME -- -D warnings
  after_script:
    - cargo clippy --locked -p $PKG_NAME --message-format=json | gitlab-clippy > target/$PKG_NAME-code-quality.json
  artifacts:
    reports:
      codequality: target/$PKG_NAME-code-quality.json

sys:lint:
  extends: .lint_base
  variables:
    PKG_NAME: libcoap-sys

lib:lint:
  extends: .lint_base
  variables:
    PKG_NAME: libcoap

docs:
  stage: docs
  allow_failure: true
  needs:
    - job: fetch-deps
      artifacts: true
  rules:
    - !reference [.on_default_branch]
    - !reference [.on_tags]
    - !reference [.allow_manual_run]
  script:
    - cargo doc --locked --workspace --no-deps
  artifacts:
    paths:
      - target/doc

pages:
  stage: release
  needs:
    - docs
  rules:
    - !reference [.on_default_branch]
  script:
    - mv target/doc public
    - echo '<meta http-equiv="refresh" content="0;" url="libcoap/index.html">' > public/index.html
  artifacts:
    paths:
      - public

gen-lsif:
  stage: .post
  allow_failure: true
  cache: []
  needs:
    - job: fetch-deps # We need the Cargo.lock file in order to run the build script (which can't be disabled)
      artifacts: true
  script:
    - rust-analyzer -v lsif . > libcoap-rs.lsif
  artifacts:
    reports:
      lsif: libcoap-rs.lsif


variables:
  # Kubernetes Runner Resource Limiting
  KUBERNETES_CPU_REQUEST: 4
  #  KUBERNETES_CPU_LIMIT: 5
  KUBERNETES_MEMORY_REQUEST: 4Gi
  KUBERNETES_MEMORY_LIMIT: 4Gi
  #  KUBERNETES_SERVICE_CPU_REQUEST: 400m
  #  KUBERNETES_SERVICE_CPU_LIMIT: 400m
  #  KUBERNETES_SERVICE_MEMORY_REQUEST: 1Gi
  #  KUBERNETES_SERVICE_MEMORY_LIMIT: 1Gi
  # ---
  # Cargo Settings
  # Number of concurrent build threads to start.
  # Note: Removing this value somehow causes jobs to randomly get stuck during compilation.
  CARGO_BUILD_JOBS: 4
  # Location of Cargo home. Needed for caching.
  CARGO_HOME: "${CI_PROJECT_DIR}/.cargo"
  # ---
  # Fastzip
  # Use faster cache and artifact compression method.
  # Increases speed **drastically**, so don't remove it unless it causes issues.
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: fast
  GIT_SUBMODULE_STRATEGY: recursive
  TRANSFER_METER_FREQUENCY: 5s
